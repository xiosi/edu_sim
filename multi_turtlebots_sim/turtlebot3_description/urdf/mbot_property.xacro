<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="property">
    <!--prefix:=camera camera--> 
    <xacro:macro name="realsense">
        <!-- <link name="${prefix}_link">
            <visual>
                <origin xyz=" 0 0 0 " rpy="0 0 0" />
                <geometry>
                    <box size="0.01 0.04 0.04" />
                </geometry>
                <material name="black"/>
            </visual>
        </link> -->
          <!-- Camera -->
        
        <link name="camera_link">
            <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="0.1 0.1 0.1"/>
            </geometry>
            </collision>
            <visual>
            <origin xyz="0 0 0" rpy="0 0 1.5708"/>
            <geometry>
                <!--<mesh filename="package://robot_sim_demo/models/meshes/xtion_pro_camera.dae" />-->
                <mesh filename="package://multi_turtlebots_sim/turtlebot3_description/meshes/sensors/realsense.obj" />
            </geometry>
            </visual>
            <inertial>
            <mass value="1e-5" />
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
            </inertial>
        </link>

        <joint name="camera_joint" type="fixed">
            <axis xyz="0 0.5 0" />
            <origin xyz="0 0 0.250" rpy="0 0 -1.5708"/>
            <parent link="base_link"/>
            <child link="camera_link"/>
        </joint>

        <!-- generate an optical frame http://www.ros.org/reps/rep-0103.html#suffix-frames
            so that ros and opencv can operate on the camera frame correctly -->
             <!-- these values have to be these values otherwise the gazebo camera image
                won't be aligned properly with the frame it is supposedly originating from -->           
        <joint name="camera_fake_joint" type="fixed">

            <origin xyz="0 0 0" rpy="0 0 1.5708"/>
            <parent link="camera_link"/>
            <child link="camera_link_fake"/>
        </joint>
        <link name="camera_link_fake">
        </link>
        <joint name="camera_optical_joint" type="fixed">
            <origin xyz="0 0 0" rpy="-1.5708 0 -1.5708"/>
            <parent link="camera_link_fake"/>
            <child link="camera_link_optical"/>
        </joint>
        <link name="camera_link_optical">
        </link>
        <link name="imu_link"/>
        <joint name="base_to_imu" type="fixed">
            <axis rpy="0 0 0" xyz="0 0 0"/>
            <parent link="camera_link"/>
            <child link="imu_link"/>
            <origin rpy="0 0 0" xyz="0 0 .2"/>
        </joint>
    </xacro:macro>
    <xacro:macro name="rplidarA2" params="name ros_topic">
    <xacro:sick_tim name="${name}" ros_topic="${ros_topic}"
      length="0.06" width="0.06" height="0.079" mass="0.150" z_offset="0.33"
      min_range="0.2" max_range="8.0"
      mesh="package://multi_turtlebots_sim/turtlebot3_description/meshes/sensors/rplidar.dae" />
    </xacro:macro>

    <xacro:macro name="sick_tim" params="name ros_topic length width height mass z_offset min_range max_range mesh">
    <!-- z_offset: distance between base plate and laser center (= center of mesh) -->

    <joint name="${name}_joint" type="fixed">
      <parent link="base_link" />
      <child link="${name}" />
      <origin rpy="0 0 0" xyz="0 0 ${z_offset}"/>
    </joint>

    <link name="${name}">
      <visual>
        <geometry>
          <mesh filename="${mesh}" />
        </geometry>
        <material name="lightblue">
          <color rgba=".5 .5 .7 .8" />
        </material>
      </visual>
      <collision>
        <geometry>
          <mesh filename="${mesh}" />
        </geometry>
      </collision>
      <inertial>
        <mass value="${mass}" />
        <origin xyz="0 0 -0.026" />
        <inertia ixx="${0.0833333 * mass * (width * width + height * height)}" ixy="0.0" ixz="0.0"
          iyy="${0.0833333 * mass * (length * length + height * height)}" iyz="0.0"
          izz="${0.0833333 * mass * (length * length + width * width)}" />
      </inertial>
    </link>
    
    <!--update_rate=15.0-->
    </xacro:macro>

    



</robot>
